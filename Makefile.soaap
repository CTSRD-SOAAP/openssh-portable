SOAAP_ROOT?=$(CURDIR)/..
LLVM_BUILD_DIR?=$(SOAAP_ROOT)/llvm/build
SOAAP_BUILD_DIR?=$(SOAAP_ROOT)/soaap/build
LLVM_LINK?=$(LLVM_BUILD_DIR)/bin/llvm-link


SOAAP?=$(SOAAP_BUILD_DIR)/bin/soaap
# TODO: remove -soaap-skip-global-variable-analysis in the future
SOAAP_DEFAULT_OPTIONS?=-soaap-infer-fp-targets -soaap-sandbox-platform=capsicum -soaap-skip-global-variable-analysis
SOAAP_EXTRA_OPTIONS?=
SOAAP_FULL_ANALYSIS_OPTIONS?=-soaap-analyses=vulnerability,syscalls,privcalls,sandboxed,infoflow -soaap-list-fp-targets -soaap-list-sandboxed-funcs -soaap-dump-rpc-graph -soaap-output-traces=all


# if configure was called correctly plain make is sufficient
# but for now always use the wrapper script
LLVM_IR_MAKE?=make-for-llvm-ir.py

.PHONY: all clean soaap soaap-json soaap-all soaap-all-json

all: sshd_executable.bc
	@echo
soaap: sshd_executable.bc
	$(SOAAP) -o sshd.soaap $^ $(SOAAP_DEFAULT_OPTIONS) $(SOAAP_OPTIONS)
soaap-json: sshd_executable.bc
	$(SOAAP) -o sshd.soaap $^ $(SOAAP_DEFAULT_OPTIONS) $(SOAAP_OPTIONS) -soaap-report-output-formats=json
soaap-all: sshd_executable.bc
	$(SOAAP) -o sshd.soaap $^ $(SOAAP_DEFAULT_OPTIONS) $(SOAAP_FULL_ANALYSIS_OPTIONS)
soaap-all-json: sshd_executable.bc
	$(SOAAP) -o sshd.soaap $^ $(SOAAP_DEFAULT_OPTIONS) $(SOAAP_FULL_ANALYSIS_OPTIONS) -soaap-report-output-formats=json

clean:
	rm -f *.bc openbsd-compat/*.bc sshd.soaap

sshd_executable.bc: sshd.bc libssh.a.bc openbsd-compat/libopenbsd-compat.a.bc
	$(LLVM_LINK) -o $@ $^

sshd.bc:
	$(LLVM_IR_MAKE) sshd $(MAKEFLAGS)
libssh.a.bc:
	$(LLVM_IR_MAKE) libssh.a $(MAKEFLAGS)
openbsd-compat/libopenbsd-compat.a.bc:
	$(LLVM_IR_MAKE) openbsd-compat/libopenbsd-compat.a $(MAKEFLAGS)

